[{"title":"Cloudflare Accessを使ってAPIスキーマを安全に共有する","contentSnippet":"スキーマ共有みなさん、バックエンドとフロントエンド間のスキーマ共有はどのようにしていますか？会社での業務であればそのあたりはすでに整備されていることが多く、各々の方法で簡単に共有ができていると思います。しかし複数人でのプライベートな開発ではなかなかそういった部分に時間が割けず、その都度チャットでやりとりしたり、Notionなどにまとめたりということも少なくないのではないでしょうか。その問題を解決するためにCloudflare PagesとCloudflare Accessだけで簡単に、そして安全に共有する方法を紹介します。 Open API私たちはOpenAPIでスキー...","link":"https://zenn.dev/fujiyama/articles/b426791d4a3122","isoDate":"2025-01-15T04:30:01.000Z","dateMiliSeconds":1736915401000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"Cookieの有効期限を15分に設定したはずが900日になっていた話","contentSnippet":"起こったこと私たちの開発するプロダクトでは一部のCookieについて、フロントエンドからJavaScriptで操作しています。タイトルの通り、リリース前のサービスでこのCookieの有効期限が900日になっていました。 なぜ起こったか実は私の所属する開発本部ではすでに運用中のサービスでもクライアントからCookieを操作していました。新規サービスでも同じような処理が必要になったため、既存のコードを参考に以下のように記述しました。既存のサービスのコードexport const COOKIE_CONFIG = {  maxAge: 15 * 60, // 15minu...","link":"https://zenn.dev/fujiyama/articles/9cc3b586e4917f","isoDate":"2024-10-29T06:00:47.000Z","dateMiliSeconds":1730181647000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"フロントエンド開発にかかせないBurp","contentSnippet":"便利ツール私たちは日々の開発の中で様々な便利ツールを使います。その中でもBurpは多くの機能を持ち、エンジニアにとってかかせないツールとなっています。今回の記事ではフロントエンド開発においてBurpがどのように役立つかを紹介します。 Burpとはhttps://portswigger.net/burpBurpはPortSwiggerにより提供されているツールで、Professional、Enterprise Editionなどの種類があります。中でもCommunity Editionは無料で提供されており、誰でも公式サイトからダウンロードすることができます。では早速...","link":"https://zenn.dev/fujiyama/articles/3c806f922010e2","isoDate":"2024-10-16T05:00:05.000Z","dateMiliSeconds":1729054805000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"【CircleCI】テストを並列に実行してカバレッジも出したいときは","contentSnippet":"CIの待ち時間エンジニアなら誰もが「CIの待ち時間の辛さ」について共感すると思います。次のタスクに取りかかろうとしてもずっとローディングとログを見てしまうのは、あるあるなのではないでしょうか。特に大規模プロジェクトでは、数分の待ち時間が10分を超え、時には30分を超えることもあります。再度修正してプッシュし直すたびにリセットされる待ち時間は、まるで終わりの見えないサイクルのようです。この「待ち時間」へのフラストレーションは、エンジニアの共通の苦労話だと思います。 並列実行とテストカバレッジ私の開発しているプロダクトでは、PRごとにテストを並列で実行しています。具体的な設...","link":"https://zenn.dev/fujiyama/articles/8d0457556bec2e","isoDate":"2024-07-17T04:00:00.000Z","dateMiliSeconds":1721188800000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"HonoでURL短縮サービスを作ろうと思ったら逆に長くなった話","contentSnippet":"Raycastの拡張機能を作成しましたみなさんは普段どんなランチャーアプリを使用していますか？macOS標準のSpotlightですか、それともサードパーティ製のツールでしょうか。僕はRaycastというアプリを使っています。Raycastはそのカスタマイズ性の高さから多くの開発者に支持されており、さらに拡張機能をTypeScriptで開発できるという特徴を持っています。今回はRaycastの拡張機能としてSurlというURL短縮サービスを開発したのでその詳細と裏側のサーバーの話をしようと思います。https://x.com/fujiyamaorange/status/1...","link":"https://zenn.dev/fujiyama/articles/f853bbb2b5e20b","isoDate":"2024-02-14T02:00:00.000Z","dateMiliSeconds":1707876000000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"複雑な支払いフォームをZodとReact Hook Formで実現する","contentSnippet":"よく見る支払いフォームここ最近、支払いフォームを実装する機会があり、その際に割と悩んで勉強になったため自分なりの解決策をシェアしようと思います。そしてちょうどこちらの記事で同じような要件の実装をされていました。非常に参考になったので掲載させていただきます。なお今回はこの要件に追加でカード選択の要件が加わったフォームを実装していきます。ぜひ最後までご覧ください。https://zenn.dev/rinda_1994/articles/866e56d744d58c!本記事内で扱う要件、スキーマは実際のものとは異なるものです。記事の最後にUI、スキーマを含む全てのコードを含ん...","link":"https://zenn.dev/fujiyama/articles/b9649d53db3e9e","isoDate":"2023-11-08T02:00:00.000Z","dateMiliSeconds":1699408800000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"【Next.js】useSearchParamsでdeleteメソッドは使えない","contentSnippet":"useSearchParamsはread onlyなURLSearchParamsフロントエンドの開発をしているとURLクエリパラメータを操作したくなるときは誰にでもあると思います。具体的にはパラメータに値を追加したり、値を取得して使用したりなどです。この操作を実現できるようにNext.jsはuseSearchParamsというhookを用意してくれています。公式ドキュメントにはread onlyなURLSeachParamsと表現されており、Next.js向けにカスタマイズしたものなら使いやすそうだと思い、実装に用いてみました。 deleteメソッドは？僕は「read...","link":"https://zenn.dev/fujiyama/articles/9e237a02408083","isoDate":"2023-10-18T23:00:00.000Z","dateMiliSeconds":1697670000000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"Apollo ClientではIDを必ずつけよう、ないなら設定しよう","contentSnippet":"TL;DRApollo Clientを使うときは必ずIDフィールドをQueryに含めよう。ないなら後述する設定を使おう。 Apollo ClientApollo ClientはGraphQLクライアントであり、キャッシュや状態管理など多くの機能も併せ持つかなり強力なライブラリとして知られています。昨今のフロントエンド開発においてGraphQLを導入するプロダクトの場合、デファクトスタンダートと言って良いほど使用されているのではないでしょうか。Apollo Clientについては@seyaさんの「世のフロントエンドエンジニアにApollo Clientを布教したい」で詳しく...","link":"https://zenn.dev/moneyforward/articles/ccbb6920cafdd0","isoDate":"2023-09-25T22:30:00.000Z","dateMiliSeconds":1695681000000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"【Next.js】App Routerでのリダイレクトを模索した","contentSnippet":"!この記事ではApp Router = Next.jsのバージョン13以降のことを指します。実際にはApp RouterとはNext.js13から新しく出たパラダイムのことですが、今回は「App Router」を使わせていただきます。 Next.jsにおけるリダイレクト方法公式ドキュメントでは以下の3つのリダイレクト方法を見つけることができました。next.config.jsに書くパターンmiddlewareに書くパターンredirect APIを使うパターンそれぞれについて簡単に説明しようと思います。 next.config.jsにリダイレクトを書くこれは...","link":"https://zenn.dev/fujiyama/articles/97426362f6c84c","isoDate":"2023-09-18T21:30:00.000Z","dateMiliSeconds":1695072600000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"ボタンには常にtype=\"button\"をつけよう","contentSnippet":"結論ボタンを実装する際には、フォームのサブミットボタンでなければtype=\"button\"をつけた方が良いです。 なぜかHTMLのボタン要素は3つのtype属性を持つことができます。submittype=\"submit\"のボタンはフォームのデータをサーバーへ送信します。buttontype=\"button\"のボタンは規定の動作がなく、イベントハンドラーを渡して使うのが一般的となります。resettype=\"reset\"のボタンはすべてのコントロールを初期値の初期化します。<input type=\"reset\"> と同様です。そし...","link":"https://zenn.dev/fujiyama/articles/496e5e81ba7df9","isoDate":"2023-08-07T22:30:00.000Z","dateMiliSeconds":1691447400000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"今からDockerを始める人へ！Docker Initがアツい！","contentSnippet":"Docker Init5月11日、Dockerチームはdocker initという新たなコマンドラインインターフェース（CLI）コマンドを開発しました。これはプロジェクトにDockerを追加するプロセスを簡素化する新機能で、ベータ版として導入されました！ コマンド1つで作成Dockerを使いたいプロジェクトへ移動しdocker initを実行するだけでプロジェクトを検出しDockerで実行するために必要なファイルを自動で生成してくれます。docker initコマンドを実行することで、既存のプロジェクトをすぐにコンテナ化することができます。!docker initを使...","link":"https://zenn.dev/fujiyama/articles/a9a67cd3feba83","isoDate":"2023-05-15T23:00:00.000Z","dateMiliSeconds":1684191600000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"【Rust】SWCプラグインを作って得た学び","contentSnippet":"!Rust初学者であり，今回初めてSWCプラグインの作成に挑戦しました．内容が間違っているところもあるかもしれませんが，コメントで優しく教えていただけると嬉しいです．!こちらのツイートに以下のように書かれており，今後高速化のためにSWCのRust APIの仕様に変更があるかもしれません．Dear SWC users, we want to hear opinions about swc rust APIs. We want to make SWC faster, but having too many APIs exposed prevent optimizations l...","link":"https://zenn.dev/fujiyama/articles/0ae86dacc2c3b5","isoDate":"2023-03-21T22:30:00.000Z","dateMiliSeconds":1679437800000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"新卒入社前に達人プログラマーを読んだ","contentSnippet":"はじめに4月から新卒エンジニアとして社会人になります．その前に「達人プログラマー」を読んでおこうと思い，手にとってみました．読んでいく中で自分の中で大切だと思った部分を抜き出して紹介していこうと思います．同じ新卒のエンジニアの方の参考になれば嬉しいです．!本に書いてある内容に加えて個人の解釈も含まれているのでそのあたりはご了承ください． 達人プログラマー 誰が本書を読むべきなのか？本書はより効率的，そしてより生産的なプログラマーになりたいと願う方々のためのものです．(中略)我々はすべて(あるいはほとんど)の答えを知っているとか，すべての状況に我々のアイデ...","link":"https://zenn.dev/fujiyama/articles/9847c39cd090c7","isoDate":"2023-02-27T22:30:00.000Z","dateMiliSeconds":1677537000000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"console.log()だけのデバッグはやめよう","contentSnippet":"はじめにフロントエンドのWeb開発においてconsole.log()というのは非常によくお世話になります．しかしconsoleオブジェクトにはには他にもたくさんのインスタンスメソッドがあり，それらを使わずに開発を行うのは少しもったいないです．この記事では様々な機能を紹介していき明日から開発で使用していただければ嬉しいです． assertconsole.assert()は第一引数に論理式をとり，第二引数以降には任意のオブジェクトを取ります．第一引数がfalseとなった場合，第二引数をコンソールに出力します． サンプルassert.js// assertcons...","link":"https://zenn.dev/fujiyama/articles/b2638ac38a3d05","isoDate":"2023-01-19T03:00:00.000Z","dateMiliSeconds":1674097200000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"【hook設計】recoilでスナックバーを設計する","contentSnippet":"はじめに今回スナックバーのリファクタリングをしていて，コンポーネントの設計について少し考える機会があったので共有させていただきます．スナックバーなどの通知系のコンポーネントはトップあたりにひとつ置いておくだけで勝手に表示されるようにしたいです． 環境React, Next.js, TypeScript, MUIなど recoilとは？Metaが作成しているReact向けの状態管理フレームワークです．Reduxとは違い、全ての状態が 1 つの Store としてまとまっておらず、atom の組み合わせで状態を表現書き味がReactのHookに似ているので直感的に...","link":"https://zenn.dev/fujiyama/articles/148bd905885802","isoDate":"2022-11-15T03:00:00.000Z","dateMiliSeconds":1668481200000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"【TS】未使用のexportをコマンド1つで検出する","contentSnippet":"TL;DRhttps://github.com/nadeesha/ts-pruneこれを使いましょう．使用されていないexportを検出することができます． VSCodeの設定これを追加すると，変数や関数の非参照数を知ることができます．\"typescript.referencesCodeLens.enabled\": \"true\" 設定などプロジェクトルートに.ts-prunercを追加する例えば以下のような設定があります．{  \"ignore\": \"src/asset/img/*|src/somewhere/*\"}上のような設定をすることで検出を無視...","link":"https://zenn.dev/fujiyama/articles/be657e15befa11","isoDate":"2022-09-06T01:00:00.000Z","dateMiliSeconds":1662426000000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"【保存版】「そのuseEffectの使い方あってる？」と言われる前に","contentSnippet":"参考https://beta.reactjs.org/learn/you-might-not-need-an-effect 目的プロジェクトで使用されている不適切なuseEffectを減らす 本題Reactの公式ドキュメントにuseEffectは必要ないかもしれない，というようなページがありとても勉強になったので記事にしようと思いました． データフェッチングアプリのデータフェッチングをuseEffect内で行うのはよく知られている方法です．Bad 💣function SearchResults({ query }) {  const [results, se...","link":"https://zenn.dev/fujiyama/articles/c26acc641c4e30","isoDate":"2022-08-09T04:00:00.000Z","dateMiliSeconds":1660017600000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"ログが少しだけ見やすくなるuseLoggerを作った","contentSnippet":"きっかけとあるインターン先でログを収集するコードを見て，　開発環境時にもっとデバッグがしやすくなったら良いなと思ってログをブラウザのコンソールにいい感じに表示するものを作りました〜!今回はカスタムフックみたいな形で作成していますが，ロジックはそのままで他のフレームワークにも使えると思います． ソースコードuseLogger.tsimport path from 'path'const colors = {    black: '\\u001b[30m',    red: '\\u001b[31m',    green: '\\u001b[32m',    ye...","link":"https://zenn.dev/fujiyama/articles/fde9f1fa30b3bc","isoDate":"2022-05-31T00:08:59.000Z","dateMiliSeconds":1653955739000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"【情報系新入生向け】C言語のポインタを理解する","contentSnippet":"対象読者C言語始めたての入門者C言語使っていたけど忘れた人今までなんとなくで使っていた人!サンプルプログラムは全て動くものなので，適宜自分の環境で実行しながら確認していくと理解が進むと思います． 前提ここではメモリ上の場所のことを「アドレス」というふうに紹介していきます．「番地」という使われ方などもありますがここではアドレスで統一して使用します．またアドレスは0x200Dのように16進数で表現されており，例えばプログラム中でsample.cint a, b[2];のように定義すれば，int型はメモリを4バイト使用するので，aのアドレスが0x0004，...","link":"https://zenn.dev/fujiyama/articles/40df341c081e2c","isoDate":"2022-04-19T01:03:24.000Z","dateMiliSeconds":1650330204000,"authorName":"Fujiyamaorange","authorId":"fujiyama"},{"title":"噂の【type-challenges】をやってみた","contentSnippet":"はじめにレベルが4段階ありますが，おそらくTypeScript上級者での基準なのであまり気にせずに学習するのが良いと思います．今回はeasyの中から特に勉強になったものをピックアップしてやっていきます．https://github.com/type-challenges/type-challengestypescript@4.4.4 Pick以下のMyPickを考えていきます．pick.tsinterface Todo {  title: string  description: string  completed: boolean}type Todo...","link":"https://zenn.dev/fujiyama/articles/a0c21d8fd6b9cb","isoDate":"2021-12-29T06:46:26.000Z","dateMiliSeconds":1640760386000,"authorName":"Fujiyamaorange","authorId":"fujiyama"}]
